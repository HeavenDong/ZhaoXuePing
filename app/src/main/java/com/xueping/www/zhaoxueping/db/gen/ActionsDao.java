package com.xueping.www.zhaoxueping.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xueping.www.zhaoxueping.db.Actions;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "action".
*/
public class ActionsDao extends AbstractDao<Actions, Void> {

    public static final String TABLENAME = "action";

    /**
     * Properties of entity Actions.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ActionID = new Property(0, long.class, "ActionID", false, "ACTION_ID");
        public final static Property ActionName = new Property(1, String.class, "ActionName", false, "ACTION_NAME");
        public final static Property ActionTime = new Property(2, String.class, "ActionTime", false, "ACTION_TIME");
        public final static Property ActionContent = new Property(3, String.class, "ActionContent", false, "ACTION_CONTENT");
    }

    private DaoSession daoSession;


    public ActionsDao(DaoConfig config) {
        super(config);
    }
    
    public ActionsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"action\" (" + //
                "\"ACTION_ID\" INTEGER NOT NULL ," + // 0: ActionID
                "\"ACTION_NAME\" TEXT," + // 1: ActionName
                "\"ACTION_TIME\" TEXT," + // 2: ActionTime
                "\"ACTION_CONTENT\" TEXT);"); // 3: ActionContent
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"action\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Actions entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getActionID());
 
        String ActionName = entity.getActionName();
        if (ActionName != null) {
            stmt.bindString(2, ActionName);
        }
 
        String ActionTime = entity.getActionTime();
        if (ActionTime != null) {
            stmt.bindString(3, ActionTime);
        }
 
        String ActionContent = entity.getActionContent();
        if (ActionContent != null) {
            stmt.bindString(4, ActionContent);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Actions entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getActionID());
 
        String ActionName = entity.getActionName();
        if (ActionName != null) {
            stmt.bindString(2, ActionName);
        }
 
        String ActionTime = entity.getActionTime();
        if (ActionTime != null) {
            stmt.bindString(3, ActionTime);
        }
 
        String ActionContent = entity.getActionContent();
        if (ActionContent != null) {
            stmt.bindString(4, ActionContent);
        }
    }

    @Override
    protected final void attachEntity(Actions entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Actions readEntity(Cursor cursor, int offset) {
        Actions entity = new Actions( //
            cursor.getLong(offset + 0), // ActionID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ActionName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ActionTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // ActionContent
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Actions entity, int offset) {
        entity.setActionID(cursor.getLong(offset + 0));
        entity.setActionName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setActionTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setActionContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Actions entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Actions entity) {
        return null;
    }

    @Override
    public boolean hasKey(Actions entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
